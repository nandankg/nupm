#!/usr/bin/env node

/**
 * 🛠️ Database Column Mapping Fix Script
 * 
 * Automatically fixes "Unknown column" errors in UPMRC forms
 * by mapping frontend field names to correct database column names
 * 
 * Usage: node scripts/fix-database-column-mapping.js [department] [form-file]
 * 
 * Examples:
 * - Fix all signalling forms: node scripts/fix-database-column-mapping.js signalling
 * - Fix specific form: node scripts/fix-database-column-mapping.js signalling AssetRegisterForm.jsx
 * - Fix all departments: node scripts/fix-database-column-mapping.js all
 */

const fs = require('fs');
const path = require('path');

// Define common field mappings that cause database errors
const FIELD_MAPPINGS = {
  // Station and Location mappings
  station: 'station_name',
  location: 'location_name', 
  depot: 'depot_name',
  
  // Employee Information mappings
  employeeName: 'employee_name',
  employeeID: 'employee_id',
  empName: 'employee_name',
  empID: 'employee_id',
  
  // Equipment and System mappings
  gearID: 'gear_id',
  equipmentID: 'equipment_id',
  systemType: 'system_type',
  equipmentType: 'equipment_type',
  
  // Time and Date mappings
  dateTime: 'date_time',
  startTime: 'start_time',
  endTime: 'end_time',
  reportTime: 'report_time',
  
  // Serial and Identification mappings
  serialno: 'serial_number',
  serialNumber: 'serial_number',
  
  // Types and Categories mappings
  failureType: 'failure_type',
  incidentType: 'incident_type',
  maintenanceType: 'maintenance_type',
  checklistType: 'checklist_type'
};

// Fields that should NEVER be sent to database (auto-generated)
const AUTO_GENERATED_FIELDS = [
  'S_No',
  'form_id', 
  'id',
  'record_id',
  'recordNumber',
  'serialNumber' // When used as display counter
];

// Department paths
const DEPARTMENT_PATHS = {
  signalling: 'src/departments/signalling/forms',
  telecom: 'src/departments/telecom/forms', 
  operation: 'src/departments/operation/forms',
  finance: 'src/departments/finance/forms',
  'afc-mainline': 'src/departments/afc-mainline/forms',
  'afc-sdc': 'src/departments/afc-sdc/forms',
  'afc-store': 'src/departments/afc-store/forms'
};

/**
 * Create field mapping code for submission data
 */
function createFieldMappingCode(fieldsToMap, otherFields = '...otherValues') {
  const destructure = [...fieldsToMap, ...AUTO_GENERATED_FIELDS].join(', ');
  const mappings = fieldsToMap
    .filter(field => FIELD_MAPPINGS[field])
    .map(field => `    ${FIELD_MAPPINGS[field]}: ${field},`)
    .join('\n');

  return {
    destructure,
    mappings,
    otherFields
  };
}

/**
 * Fix Pattern A: Direct formValues spreading
 */
function fixPatternA(content) {
  // Pattern: const submissionData = { ...formValues, status: ... };
  const patternA = /const submissionData = \{\s*\.\.\.formValues,([^}]*)\}/gs;
  
  return content.replace(patternA, (match, statusPart) => {
    // Extract fields that need mapping from the file
    const fieldsInFile = extractFieldsFromFile(content);
    const fieldsToMap = fieldsInFile.filter(field => FIELD_MAPPINGS[field]);
    
    if (fieldsToMap.length === 0) {
      return match; // No mapping needed
    }
    
    const { destructure, mappings } = createFieldMappingCode(fieldsToMap);
    
    return `// FIXED: Map frontend fields to database columns
  const { ${destructure}, ...otherValues } = formValues;
  const submissionData = {
    ...otherValues,
    // Database field mappings
${mappings}${statusPart}
  }`;
  });
}

/**
 * Fix Pattern B: values wrapper structure  
 */
function fixPatternB(content) {
  // Pattern: values: { ...formValues, status: ... }
  const patternB = /values:\s*\{\s*\.\.\.formValues,([^}]*)\}/gs;
  
  return content.replace(patternB, (match, statusPart) => {
    const fieldsInFile = extractFieldsFromFile(content);
    const fieldsToMap = fieldsInFile.filter(field => FIELD_MAPPINGS[field]);
    
    if (fieldsToMap.length === 0) {
      return match;
    }
    
    const { destructure, mappings } = createFieldMappingCode(fieldsToMap);
    
    return `values: {
      ...otherValues,
      // Database field mappings  
${mappings}${statusPart}
    }`;
  });
}

/**
 * Fix Pattern C: Remove auto-generated fields from initial values
 */
function fixPatternC(content) {
  // Remove auto-generated fields from initialValues/basicInitialValues
  AUTO_GENERATED_FIELDS.forEach(field => {
    const patterns = [
      new RegExp(`\\s*${field}:\\s*[^,\\n}]+,?\\s*(?:\\/\\*.*?\\*\\/)?\\s*`, 'g'),
      new RegExp(`\\s*${field}:\\s*[^,\\n}]+,?\\s*(?:\\/\\/.*)?\\n`, 'g')
    ];
    
    patterns.forEach(pattern => {
      content = content.replace(pattern, (match) => {
        return `\n    // FIXED: Removed ${field} - auto-generated by database\n`;
      });
    });
  });
  
  return content;
}

/**
 * Extract field names from form file content
 */
function extractFieldsFromFile(content) {
  const fields = [];
  
  // Find field definitions in initial values
  const initialValuePattern = /(?:basicInitialValues|initialValues|initialFormState)\s*=\s*\{([^}]+)\}/gs;
  const matches = content.matchAll(initialValuePattern);
  
  for (const match of matches) {
    const fieldsSection = match[1];
    const fieldPattern = /(\w+):\s*[^,\n}]+/g;
    const fieldMatches = fieldsSection.matchAll(fieldPattern);
    
    for (const fieldMatch of fieldMatches) {
      fields.push(fieldMatch[1]);
    }
  }
  
  return [...new Set(fields)]; // Remove duplicates
}

/**
 * Add universal field mapping helper function to file
 */
function addUniversalMapper(content) {
  // Check if mapper already exists
  if (content.includes('mapFieldsToDatabase')) {
    return content;
  }
  
  const mapperFunction = `
/**
 * Universal Database Field Mapper
 * Maps frontend field names to database column names
 */
const mapFieldsToDatabase = (formValues) => {
  const {
    // Auto-generated fields (NEVER send)
    S_No, form_id, id, record_id, recordNumber, serialNumber,
    
    // Fields that need mapping
    station, employeeName, employeeID, gearID, equipmentID,
    dateTime, startTime, endTime, serialno, failureType,
    incidentType, maintenanceType, checklistType, systemType,
    equipmentType,
    
    ...otherValues
  } = formValues;

  return {
    ...otherValues,
    // Apply mappings only if fields exist
    ...(station && { station_name: station }),
    ...(employeeName && { employee_name: employeeName }),
    ...(employeeID && { employee_id: employeeID }),
    ...(gearID && { gear_id: gearID }),
    ...(equipmentID && { equipment_id: equipmentID }),
    ...(dateTime && { date_time: dateTime }),
    ...(startTime && { start_time: startTime }),
    ...(endTime && { end_time: endTime }),
    ...(serialno && { serial_number: serialno }),
    ...(failureType && { failure_type: failureType }),
    ...(incidentType && { incident_type: incidentType }),
    ...(maintenanceType && { maintenance_type: maintenanceType }),
    ...(checklistType && { checklist_type: checklistType }),
    ...(systemType && { system_type: systemType }),
    ...(equipmentType && { equipment_type: equipmentType })
  };
};

`;
  
  // Add after imports but before component definition
  const componentPattern = /(const \w+Form = \(\) => \{)/;
  return content.replace(componentPattern, mapperFunction + '$1');
}

/**
 * Process a single form file
 */
function processFormFile(filePath) {
  console.log(`Processing: ${filePath}`);
  
  if (!fs.existsSync(filePath)) {
    console.warn(`File not found: ${filePath}`);
    return;
  }
  
  let content = fs.readFileSync(filePath, 'utf8');
  const originalContent = content;
  
  // Create backup
  const backupPath = filePath + '.backup';
  fs.writeFileSync(backupPath, originalContent);
  
  // Apply fixes
  content = fixPatternC(content); // Remove auto-generated fields first
  content = fixPatternA(content); // Fix direct spreading
  content = fixPatternB(content); // Fix values wrapper
  content = addUniversalMapper(content); // Add helper function
  
  // Only write if changes were made
  if (content !== originalContent) {
    fs.writeFileSync(filePath, content);
    console.log(`✅ Fixed: ${filePath}`);
    console.log(`📄 Backup: ${backupPath}`);
    return true;
  } else {
    // Remove backup if no changes
    fs.unlinkSync(backupPath);
    console.log(`ℹ️  No changes needed: ${filePath}`);
    return false;
  }
}

/**
 * Process all forms in a department
 */
function processDepartment(department) {
  const departmentPath = DEPARTMENT_PATHS[department];
  
  if (!departmentPath) {
    console.error(`Unknown department: ${department}`);
    console.log(`Available departments: ${Object.keys(DEPARTMENT_PATHS).join(', ')}`);
    return;
  }
  
  const fullPath = path.resolve(departmentPath);
  
  if (!fs.existsSync(fullPath)) {
    console.warn(`Department path not found: ${fullPath}`);
    return;
  }
  
  console.log(`\n🔧 Processing ${department} department forms...`);
  
  const files = fs.readdirSync(fullPath)
    .filter(file => file.endsWith('.jsx'))
    .map(file => path.join(fullPath, file));
  
  let fixedCount = 0;
  
  files.forEach(filePath => {
    if (processFormFile(filePath)) {
      fixedCount++;
    }
  });
  
  console.log(`\n📊 ${department} Summary: ${fixedCount}/${files.length} files fixed`);
}

/**
 * Main execution
 */
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
🛠️  Database Column Mapping Fix Script

Usage: 
  node scripts/fix-database-column-mapping.js [department] [form-file]

Examples:
  node scripts/fix-database-column-mapping.js signalling
  node scripts/fix-database-column-mapping.js signalling AssetRegisterForm.jsx  
  node scripts/fix-database-column-mapping.js all

Available departments: ${Object.keys(DEPARTMENT_PATHS).join(', ')}
`);
    return;
  }
  
  const [department, formFile] = args;
  
  console.log('🚀 Starting Database Column Mapping Fix...');
  console.log(`📅 ${new Date().toISOString()}`);
  
  if (department === 'all') {
    // Process all departments
    Object.keys(DEPARTMENT_PATHS).forEach(dept => {
      processDepartment(dept);
    });
  } else if (formFile) {
    // Process specific file
    const filePath = path.resolve(DEPARTMENT_PATHS[department], formFile);
    processFormFile(filePath);
  } else {
    // Process entire department
    processDepartment(department);
  }
  
  console.log('\n✅ Database Column Mapping Fix Complete!');
  console.log('\n📋 Next Steps:');
  console.log('1. Test form submissions for both draft and final submit');
  console.log('2. Verify no "Unknown column" errors in network tab');
  console.log('3. Check that form_id is auto-generated properly');
  console.log('4. Review backup files and remove if fixes work correctly');
}

// Export for use as module or run directly
if (require.main === module) {
  main();
}

module.exports = {
  processFormFile,
  processDepartment,
  FIELD_MAPPINGS,
  AUTO_GENERATED_FIELDS
};