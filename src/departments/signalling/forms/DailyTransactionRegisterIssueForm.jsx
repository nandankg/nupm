import React, { useState, useMemo } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { UniversalSignallingFormField, SignallingFormLayout } from '../components';
import { dailyTransactionIssueValidationSchema } from '../validation/signallingValidationSchemas';

const DailyTransactionRegisterIssueForm = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  // Memoize user data parsing to avoid re-parsing on every render
  const user = useMemo(() => {
    const userData = localStorage.getItem("userdata");
    return userData ? JSON.parse(userData) : {};
  }, []);

  const [formData, setFormData] = useState({
    date: '',
    materialId: '',
    materialDesc: '',
    serialNo: '',
    qtyIssued: '',
    requisitionSlipNo: '',
    requisitionSlipDate: '',
    issuedTo: '',
    designation: '',
    location: '',
    forWhatWork: '',
    issuedByName: '',
    issuedByDesignation: '',
    issuedBySign: '',
    ledgerNo: '',
    remarks: ''
  });

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  // Common signalling materials for dropdown
  const signallingMaterials = [
    { name: 'Signal Cables' },
    { name: 'Point Machine Parts' },
    { name: 'LED Signal Heads' },
    { name: 'Track Circuits' },
    { name: 'Axle Counters' },
    { name: 'Control Cables' },
    { name: 'Junction Boxes' },
    { name: 'Transformers' },
    { name: 'Relays' },
    { name: 'Batteries' },
    { name: 'SMPS Units' },
    { name: 'ATS Equipment' }
  ];

  // Railway locations for dropdown
  const railwayLocations = [
    'Signal Post A1', 'Signal Post A2', 'Signal Post B1', 'Signal Post B2',
    'Junction Box JB1', 'Junction Box JB2', 'Control Room', 'Equipment Room',
    'Platform 1', 'Platform 2', 'Depot', 'Workshop', 'OCC', 'Station Master Office'
  ];

  const validateForm = () => {
    const newErrors = {};

    // Required field validation
    if (!formData.date) {
      newErrors.date = 'Date is required';
    }
    if (!formData.materialDesc) {
      newErrors.materialDesc = 'Material description is required';
    }
    if (!formData.qtyIssued) {
      newErrors.qtyIssued = 'Quantity issued is required';
    } else if (parseFloat(formData.qtyIssued) <= 0) {
      newErrors.qtyIssued = 'Quantity must be greater than 0';
    }
    if (!formData.requisitionSlipNo) {
      newErrors.requisitionSlipNo = 'Requisition slip number is required';
    }
    if (!formData.requisitionSlipDate) {
      newErrors.requisitionSlipDate = 'Requisition slip date is required';
    }
    if (!formData.issuedTo) {
      newErrors.issuedTo = 'Issued to name is required';
    }
    if (!formData.designation) {
      newErrors.designation = 'Designation is required';
    }
    if (!formData.issuedByName) {
      newErrors.issuedByName = 'Issuer name is required';
    }

    // Date validation
    if (formData.date && formData.requisitionSlipDate) {
      const issueDate = new Date(formData.date);
      const requisitionDate = new Date(formData.requisitionSlipDate);
      if (issueDate < requisitionDate) {
        newErrors.date = 'Issue date cannot be earlier than requisition date';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Auto-populate material description when material is selected
    if (field === 'materialId' && value) {
      const selectedMaterial = signallingMaterials.find(m => m.id === value);
      if (selectedMaterial) {
        setFormData(prev => ({
          ...prev,
          materialDesc: selectedMaterial.name
        }));
      }
    }

    // Clear field error when user starts typing
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error('Please fix the errors before submitting');
      return;
    }

    setLoading(true);
    try {
      const submissionData = {
        // FIXED: Remove client-side IDs - form_id is auto-generated by database
        formType: 'daily-transaction-register-issue',
        department: 'Signalling',
        submittedBy: user?.name || 'Unknown User',
        submittedAt: new Date().toISOString(),
        ...formData
      };

      console.log('Daily Transaction Issue Data:', submissionData);
      
      // Here you would dispatch to your Redux store or make API call
      // dispatch(saveDailyTransactionIssueData(submissionData));
      
      toast.success('Issue entry saved successfully!');
      // navigate('/signalling/daily-transaction-issue-list');
      
    } catch (error) {
      console.error('Error saving issue entry:', error);
      toast.error('Failed to save issue entry. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleReset = () => {
    setFormData({
      date: '',
      materialId: '',
      materialDesc: '',
      serialNo: '',
      qtyIssued: '',
      requisitionSlipNo: '',
      requisitionSlipDate: '',
      issuedTo: '',
      designation: '',
      location: '',
      forWhatWork: '',
      issuedByName: '',
      issuedByDesignation: '',
      issuedBySign: '',
      ledgerNo: '',
      remarks: ''
    });
    setErrors({});
    toast.info('Form reset successfully');
  };

  return (
    <SignallingFormLayout
      title="Daily Transaction Register - Issues"
      description="Record material issues for signalling department"
    >
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Basic Information */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <UniversalSignallingFormField
            type="date"
            label="Date"
            value={formData.date}
            onChange={(value) => handleInputChange('date', value)}
            required
            error={errors.date}
          />
          <UniversalSignallingFormField
            type="select"
            label="Select Material"
            value={formData.materialId}
            onChange={(value) => handleInputChange('materialId', value)}
            options={[
              { value: '', label: 'Select Material' },
              ...signallingMaterials.map(material => ({
                value: material.id,
                label: material.name
              }))
            ]}
            error={errors.materialId}
          />
          <UniversalSignallingFormField
            type="text"
            label="Material Description"
            value={formData.materialDesc}
            onChange={(value) => handleInputChange('materialDesc', value)}
            placeholder="Enter material description"
            required
            error={errors.materialDesc}
          />
        </div>

        {/* Quantity and Serial Information */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <UniversalSignallingFormField
            type="text"
            label="Serial No."
            value={formData.serialNo}
            onChange={(value) => handleInputChange('serialNo', value)}
            placeholder="Enter serial number"
            error={errors.serialNo}
          />
          <UniversalSignallingFormField
            type="number"
            label="Quantity Issued"
            value={formData.qtyIssued}
            onChange={(value) => handleInputChange('qtyIssued', value)}
            placeholder="Enter quantity issued"
            min="1"
            required
            error={errors.qtyIssued}
          />
        </div>

        {/* Requisition Information */}
        <div className="bg-blue-50 p-4 rounded-lg">
          <h4 className="text-lg font-semibold text-blue-800 mb-4 text-center">Requisition Information</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <UniversalSignallingFormField
              type="text"
              label="Requisition Slip No."
              value={formData.requisitionSlipNo}
              onChange={(value) => handleInputChange('requisitionSlipNo', value)}
              placeholder="Enter requisition slip number"
              required
              error={errors.requisitionSlipNo}
            />
            <UniversalSignallingFormField
              type="date"
              label="Requisition Slip Date"
              value={formData.requisitionSlipDate}
              onChange={(value) => handleInputChange('requisitionSlipDate', value)}
              required
              error={errors.requisitionSlipDate}
            />
          </div>
        </div>

        {/* Issue To Information */}
        <div className="bg-green-50 p-4 rounded-lg">
          <h4 className="text-lg font-semibold text-green-800 mb-4 text-center">Issue To Information</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <UniversalSignallingFormField
              type="text"
              label="Issued To (Name)"
              value={formData.issuedTo}
              onChange={(value) => handleInputChange('issuedTo', value)}
              placeholder="Enter recipient name"
              required
              error={errors.issuedTo}
            />
            <UniversalSignallingFormField
              type="text"
              label="Designation"
              value={formData.designation}
              onChange={(value) => handleInputChange('designation', value)}
              placeholder="Enter designation"
              required
              error={errors.designation}
            />
            <UniversalSignallingFormField
              type="select"
              label="Location"
              value={formData.location}
              onChange={(value) => handleInputChange('location', value)}
              options={[
                { value: '', label: 'Select Location' },
                ...railwayLocations.map(location => ({
                  value: location,
                  label: location
                }))
              ]}
              error={errors.location}
            />
          </div>
        </div>

        {/* Work Information */}
        <UniversalSignallingFormField
          type="textarea"
          label="For What Work"
          value={formData.forWhatWork}
          onChange={(value) => handleInputChange('forWhatWork', value)}
          placeholder="Describe the purpose/work for which material is issued"
          rows={3}
          error={errors.forWhatWork}
        />

        {/* Issuer Information */}
        <div className="bg-orange-50 p-4 rounded-lg">
          <h4 className="text-lg font-semibold text-orange-800 mb-4 text-center">Issued By Information</h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <UniversalSignallingFormField
              type="text"
              label="Issued By (Name)"
              value={formData.issuedByName}
              onChange={(value) => handleInputChange('issuedByName', value)}
              placeholder="Enter issuer name"
              required
              error={errors.issuedByName}
            />
            <UniversalSignallingFormField
              type="text"
              label="Designation"
              value={formData.issuedByDesignation}
              onChange={(value) => handleInputChange('issuedByDesignation', value)}
              placeholder="Enter designation"
              error={errors.issuedByDesignation}
            />
            <UniversalSignallingFormField
              type="text"
              label="Signature"
              value={formData.issuedBySign}
              onChange={(value) => handleInputChange('issuedBySign', value)}
              placeholder="Digital signature/ID"
              error={errors.issuedBySign}
            />
          </div>
        </div>

        {/* Additional Information */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <UniversalSignallingFormField
            type="text"
            label="Ledger No."
            value={formData.ledgerNo}
            onChange={(value) => handleInputChange('ledgerNo', value)}
            placeholder="Enter ledger number"
            error={errors.ledgerNo}
          />
          <UniversalSignallingFormField
            type="textarea"
            label="Remarks"
            value={formData.remarks}
            onChange={(value) => handleInputChange('remarks', value)}
            placeholder="Additional notes or remarks"
            rows={2}
            error={errors.remarks}
          />
        </div>

        {/* Form Actions */}
        <div className="flex justify-end space-x-4 pt-6">
          <button
            type="button"
            onClick={handleReset}
            className="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-6 rounded-lg"
            disabled={loading}
          >
            Reset
          </button>
          <button
            type="submit"
            className={`font-bold py-2 px-6 rounded-lg ${
              loading
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-green-600 hover:bg-green-700 text-white'
            }`}
            disabled={loading}
          >
            {loading ? (
              <span className="flex items-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Saving...
              </span>
            ) : (
              'Save Issue'
            )}
          </button>
        </div>
      </form>
    </SignallingFormLayout>
  );
};

export default DailyTransactionRegisterIssueForm;